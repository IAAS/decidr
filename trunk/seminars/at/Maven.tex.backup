\section{Maven}

Der \marginpar{Definition} Begriff \glqq Maven\grqq{} selbst stammt aus dem Jüdischen (\emph{meyvn}) bzw. aus dem Hebräischem (\emph{mevin}) und bedeutet soviel wie \glqq Experte\grqq{}. Die genaue englische Übersetzung lautet \glqq accumulator of knowledge\grqq{} \cite{maven}, quasi ein Speicher für Wissen. 

Maven wurde als Ansatz im \emph{Apache Jakarta Turbine Project} benutzt, um den Build-Prozess zu vereinfachen. Turbine ist ein Servlet basiertes Framework für erfahrene Java-Entwickler, um schnell Web-Applikationen zu erstellen. Es gab einige verschiedene Projekte mit ihren eigenen Ant-Buildfiles, die alle unterschiedlich waren und die Jar-Dateien wurden alle ins CVS geladen.

Daraus resultierte der Wunsch eines einheitlichen automatisierten Verfahrens, um den kompletten Build-Prozess zu standardisieren. Dabei setzt sich Maven mit folgenden Zielen auseinander:
\begin{itemize}
 \item Vereinfachung des Build-Prozesses
 \item Bereitstellung eines einheitlichen Build-Systems
 \item Bereitstellung von Qualitätsinformationen bezüglich des Projektes
 \item Bereitstellung von Richtlininen zur besten Entwicklung
 \item Transparente Migration von neuen Features (mittels Plug-Ins)
\end{itemize}

Außerdem versucht Maven das Prinzip \emph{Convention over Configuration} \cite{convention} für den gesamten Software-Lebenszyklus zu verfolgen. Dabei ist das Ziel, die Zahl der Entscheidungen, die ein Entwickler trifft, zu verringern und dabei Einfachheit zu erreichen, ohne die Felxibiltät zu beeinflussen

Die erste Version von Maven war noch stark an Ant angelehnt, sodass sich diese beiden Build-Methoden ähnelten. Die zweite Version verfolgte grundlegende neue Ansätze und ist nicht mehr mit der vorherigen Version kompatibel.

\subsection{Grundsätze und Eigenschaften Mavens}
Ein \marginpar{Zentrales Repository} Grundgedanke besteht darin, sämtliche Bibliotheken und Plugins an einem zentralen Ort zu verwalten. Dies vereinfacht bei vielen Projekten den Verwaltungsaufwand. Dieses zentrale Repository bietet die Apache Group an. Man kann auch eigene Repositorys erstellen. Der Vorteil besteht darin, dass man keine Internetverbindung benötigt und eine firmenübergreifende Bibliothek erstellen kann. Der Vorteil des zentralen Repositorys liegt darin, dass Abhängigkeiten bereits abgelegt sind, und nicht manuell mit eingebaut werden müssen.

Beim \marginpar{pom.xml} Erstellen eines Maven Projektes kann der Benutzer die Ordnernamen und die Ordnertiefe genau festlegen. Maven erstellt eine XML-Datei, die sogenannte \emph{pom.xml}. In dieser stehen die Grunddaten für das Projekt. Zum Beispiel stehen in der Datei, der Name des Projektes, die Version, die Art des Paketes, das später erstellt werden soll, die URL, die sich auf das Projekt bezieht und die Abhängigkeiten, die das Projekt mit sich bringt und aufgelöst werden sollen, wenn das Projekt erstellt wird. 

Zusätzlich \marginpar{settings.xml} wird eine weitere Konfigurationsverwaltung erstellt, die \emph{settings.xml}. In ihr werden die Zugangsdaten für den Repository-Server gespeichert. Desweiteren werden die Einbindung von Plugins- oder Bibliotheken-Repositorys oder projektübergreifende Parameter eingestellt. Sowohl in der \texttt{settings.xml} als auch in der \texttt{pom.xml} gibt es sogennante Profile, die ein weiterer Mechanismus zur Änderung der Einstellungen sind. In ihr können abweichende Parameter gesetzt werden, wie z.B. für Filterdateien oder Repositorys.

Wie \marginpar{.m2-Ordner} schon erwähnt, werden bei der ersten Verwendung diese beiden XML-Dateien erstellt. Zusätzlich wird noch ein weiterer Ordner erstellt. Dieser heißt .m2 Ordner und in ihm befindet sich das lokale Repository, welches mit den Dateien des entfernten Maven-Repositorys gefüllt wird. Somit ist gewährleistet, dass bei einem erneuten Benutzen von Maven nicht alles aus dem entfernten Repository heruntergeladen wird. Maven greift nur noch auf das lokale Repository zu, sofern die benötigten Pakete dort schon vorhanden sind. Wenn nicht, werden diese automatisch herruntergeladen.

Es \marginpar{IDE} gibt für Eclipse \cite{maven-eclipse} und NetBeans Plugins \cite{netbeans} , um Maven in den IDEs zu integrieren und dort auch zu nutzen. 

Man \marginpar{POM} sieht also, dass mit wenigen Konfigurationseinstellungen die einzelnen Maven-Phasen (Vergleich Abschnitt 3.2) verändert werden kann. Aber diese Einstellungen ändern nichts am automatisierten Vorgehen von Maven. Dieser bleibt immer gleich. Maven baut seine Projekte durch das Project Object Model (POM). Somit ist ein einheitliches Build-System gewährleistet, was es wiederrum möglich macht alle Maven Projekte zu verstehen. Dadurch spart man Zeit bei der Einarbeitung von anderen Projekten, da man die Bauweise kennt.

Maven basiert auf einer Plugin-Architektur, die es erlaubt verschiedene Plugins für verschiedene Anwendungen auf das Projekt anzuwenden, ohne diese explizit installieren zu müssen. 

Zum \marginpar{Was Maven nicht ist} Schluss noch einige Dinge darüber was Maven nicht ist. Maven ist keine Erweiterung des Build-Tools Ant. Maven stellt die besten Möglichkeiten zur Verfügung. Es kann durchaus sein, dass es manchmal nicht möglich ist mit Maven ein Projekt zu bauen, weil die Struktur des Projektes so exotisch ist, dass eine Standardisierung gar nicht möglich ist. Dann sollte man ,in diesem Fall, Maven lieber aufgeben und versuchen das Projekt auf eine andere Weise zu bauen. 

Beim kompletten Build-Prozess durchläuft Maven verschiedene Phasen, in denen jeweils ein bestimmter Teil des Software-Lebenszyklus durchgearbeitet wird. Dabei startet der Lebenszyklus bei Maven erst in der Implementierungsphase. Phasen, die vor der Implementierung stattfinden, wie Spezifikation und Entwurf, werden von Maven nicht berücksichtigt. Diese werden im nächsten Abschnitt beschrieben.
