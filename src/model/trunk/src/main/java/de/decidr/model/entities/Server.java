/*
 * The DecidR Development Team licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package de.decidr.model.entities;

// Generated 28.12.2009 10:39:25 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Server generated by hbm2java.
 */
public class Server implements java.io.Serializable {

    /** The Constant serialVersionUID. */
    private static final long serialVersionUID = 1L;

    /** The id. */
    private Long id;

    /** The server type. */
    private ServerType serverType;

    /** The location. */
    private String location;

    /** The load. */
    private byte load;

    /** The locked. */
    private boolean locked;

    /** The dynamically added. */
    private boolean dynamicallyAdded;

    /** The last load update. */
    private Date lastLoadUpdate;

    /** The workflow model is deployed on servers. */
    private Set<WorkflowModelIsDeployedOnServer> workflowModelIsDeployedOnServers = new HashSet<WorkflowModelIsDeployedOnServer>(
            0);

    /** The workflow instances. */
    private Set<WorkflowInstance> workflowInstances = new HashSet<WorkflowInstance>(
            0);

    /**
     * Instantiates a new server.
     */
    public Server() {
        // default empty JavaBean constructor
    }

    /**
     * Instantiates a new server.
     * 
     * @param serverType
     *            the server type
     * @param location
     *            the location
     * @param load
     *            the load
     * @param locked
     *            the locked
     * @param dynamicallyAdded
     *            the dynamically added
     */
    public Server(ServerType serverType, String location, byte load,
            boolean locked, boolean dynamicallyAdded) {
        // generated minimal constructor
        this.serverType = serverType;
        this.location = location;
        this.load = load;
        this.locked = locked;
        this.dynamicallyAdded = dynamicallyAdded;
    }

    /**
     * Instantiates a new server.
     * 
     * @param serverType
     *            the server type
     * @param location
     *            the location
     * @param load
     *            the load
     * @param locked
     *            the locked
     * @param dynamicallyAdded
     *            the dynamically added
     * @param lastLoadUpdate
     *            the last load update
     * @param workflowModelIsDeployedOnServers
     *            the workflow model is deployed on servers
     * @param workflowInstances
     *            the workflow instances
     */
    public Server(
            ServerType serverType,
            String location,
            byte load,
            boolean locked,
            boolean dynamicallyAdded,
            Date lastLoadUpdate,
            Set<WorkflowModelIsDeployedOnServer> workflowModelIsDeployedOnServers,
            Set<WorkflowInstance> workflowInstances) {
        // generated full constructor
        this.serverType = serverType;
        this.location = location;
        this.load = load;
        this.locked = locked;
        this.dynamicallyAdded = dynamicallyAdded;
        this.lastLoadUpdate = lastLoadUpdate;
        this.workflowModelIsDeployedOnServers = workflowModelIsDeployedOnServers;
        this.workflowInstances = workflowInstances;
    }

    /**
     * Gets the id.
     * 
     * @return the id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the id.
     * 
     * @param id
     *            the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the server type.
     * 
     * @return the server type
     */
    public ServerType getServerType() {
        return this.serverType;
    }

    /**
     * Sets the server type.
     * 
     * @param serverType
     *            the new server type
     */
    public void setServerType(ServerType serverType) {
        this.serverType = serverType;
    }

    /**
     * Gets the location.
     * 
     * @return the location
     */
    public String getLocation() {
        return this.location;
    }

    /**
     * Sets the location.
     * 
     * @param location
     *            the new location
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Gets the load.
     * 
     * @return the load
     */
    public byte getLoad() {
        return this.load;
    }

    /**
     * Sets the load.
     * 
     * @param load
     *            the new load
     */
    public void setLoad(byte load) {
        this.load = load;
    }

    /**
     * Checks if is locked.
     * 
     * @return true, if is locked
     */
    public boolean isLocked() {
        return this.locked;
    }

    /**
     * Sets the locked.
     * 
     * @param locked
     *            the new locked
     */
    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    /**
     * Checks if is dynamically added.
     * 
     * @return true, if is dynamically added
     */
    public boolean isDynamicallyAdded() {
        return this.dynamicallyAdded;
    }

    /**
     * Sets the dynamically added.
     * 
     * @param dynamicallyAdded
     *            the new dynamically added
     */
    public void setDynamicallyAdded(boolean dynamicallyAdded) {
        this.dynamicallyAdded = dynamicallyAdded;
    }

    /**
     * Gets the last load update.
     * 
     * @return the last load update
     */
    public Date getLastLoadUpdate() {
        return this.lastLoadUpdate;
    }

    /**
     * Sets the last load update.
     * 
     * @param lastLoadUpdate
     *            the new last load update
     */
    public void setLastLoadUpdate(Date lastLoadUpdate) {
        this.lastLoadUpdate = lastLoadUpdate;
    }

    /**
     * Gets the workflow model is deployed on servers.
     * 
     * @return the workflow model is deployed on servers
     */
    public Set<WorkflowModelIsDeployedOnServer> getWorkflowModelIsDeployedOnServers() {
        return this.workflowModelIsDeployedOnServers;
    }

    /**
     * Sets the workflow model is deployed on servers.
     * 
     * @param workflowModelIsDeployedOnServers
     *            the new workflow model is deployed on servers
     */
    public void setWorkflowModelIsDeployedOnServers(
            Set<WorkflowModelIsDeployedOnServer> workflowModelIsDeployedOnServers) {
        this.workflowModelIsDeployedOnServers = workflowModelIsDeployedOnServers;
    }

    /**
     * Gets the workflow instances.
     * 
     * @return the workflow instances
     */
    public Set<WorkflowInstance> getWorkflowInstances() {
        return this.workflowInstances;
    }

    /**
     * Sets the workflow instances.
     * 
     * @param workflowInstances
     *            the new workflow instances
     */
    public void setWorkflowInstances(Set<WorkflowInstance> workflowInstances) {
        this.workflowInstances = workflowInstances;
    }

}
